#!/usr/bin/env bash

set -e

echo "==> Setting up test environment..."
export RAILS_ENV=test
export POSTGRES_USER=postgres
export POSTGRES_PASSWORD=postgres
export POSTGRES_HOST=localhost
export POSTGRES_PORT=5432
export POSTGRES_SSL_MODE=prefer
export DATABASE_NAME=llm_mania_test

echo "==> Checking PostgreSQL connection..."
pg_isready -h localhost -p 5432 || {
  echo "PostgreSQL is not running! Please start your PostgreSQL server."
  exit 1
}

echo "==> Recreating database..."
# Try the psql approach first
echo "Attempting to drop and create database via psql..."
PGPASSWORD=postgres psql -h localhost -U postgres -c "DROP DATABASE IF EXISTS llm_mania_test;" || true
PGPASSWORD=postgres psql -h localhost -U postgres -c "CREATE DATABASE llm_mania_test;" 
if [ $? -ne 0 ]; then
  echo "Failed to create database via psql. Trying Rails method..."
  bin/rails db:drop db:create || {
    echo "Both psql and Rails methods failed to create the database."
    exit 1
  }
fi

echo "==> Running migrations..."
bin/rails db:migrate || {
  echo "Failed to run migrations. Please check your migration files."
  exit 1
}

echo "==> Loading seeds..."
bin/rails db:seed || {
  echo "Failed to load seeds. But continuing as this may not be critical."
}

echo "==> Verifying database setup..."
# Run a simple Rails command to verify SystemConfig is working
bin/rails runner "puts 'SystemConfig table exists: ' + ActiveRecord::Base.connection.table_exists?(:system_configs).to_s"
if [ $? -ne 0 ]; then
  echo "WARNING: System verification check failed, but continuing with tests..."
fi

echo "==> Running tests..."
bin/rails test test:system

echo "==> CI tests completed successfully!" 