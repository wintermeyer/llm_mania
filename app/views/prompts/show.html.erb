<div class="mx-auto px-4 sm:px-6 lg:px-8 max-w-7xl">
  <!-- Shared Header Partial -->
  <%= render partial: 'prompts/header', locals: { 
    title: t('.title'), 
    subtitle: t('.created_at', time: l(@prompt.created_at, format: :long)),
    button_text: t('.back_to_dashboard'),
    button_path: root_path
  } %>

  <!-- Shared Flash Messages -->
  <%= render partial: 'shared/flash_messages' %>

  <% if @prompt.private %>
    <div class="mt-2 inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800">
      <%= t('.private_label') %>
    </div>
  <% end %>

  <!-- Prompt Content -->
  <section class="mt-6 bg-white shadow overflow-hidden sm:rounded-lg">
    <div class="px-4 py-5 sm:px-6 bg-gray-50">
      <h2 class="text-lg leading-6 font-medium text-gray-900"><%= t('.prompt_content') %></h2>
    </div>
    <div class="border-t border-gray-200 px-4 py-5 sm:p-6">
      <div class="prose max-w-none">
        <%= simple_format h(@prompt.content) %>
      </div>
    </div>
  </section>

  <!-- LLM Responses -->
  <section class="mt-8">
    <h2 class="text-xl font-semibold text-gray-900 mb-4"><%= t('.responses') %></h2>
    
    <div 
      x-data="{ 
        lastUpdated: null,
        isLoading: false,
        minDelay: 2000,
        maxDelay: 8000,
        nextUpdateDelay: 2000,
        completed: <%= @prompt.llm_jobs.all? { |job| job.status == 'completed' || job.status == 'failed' } %>,
        
        async fetchStatus() {
          if (this.completed) return;
          
          this.isLoading = true;
          try {
            const response = await fetch('<%= llm_jobs_status_prompt_path(@prompt) %>');
            const html = await response.text();
            
            // Only update if we got a valid response
            if (response.ok) {
              this.$refs.llmJobsContainer.innerHTML = html;
              this.lastUpdated = new Date();
              
              // Check if all jobs are completed or failed
              const completedJobs = this.$refs.llmJobsContainer.querySelectorAll('[data-status=completed], [data-status=failed]').length;
              const totalJobs = this.$refs.llmJobsContainer.querySelectorAll('[data-status]').length;
              this.completed = completedJobs === totalJobs;
              
              // If not completed, schedule next update with a random delay
              if (!this.completed) {
                this.scheduleNextUpdate();
              }
            }
          } catch (error) {
            console.error('Error fetching LLM job status:', error);
            this.scheduleNextUpdate(); // Try again even if there was an error
          } finally {
            this.isLoading = false;
          }
        },
        
        scheduleNextUpdate() {
          // Random delay between min and max
          this.nextUpdateDelay = Math.floor(Math.random() * (this.maxDelay - this.minDelay + 1)) + this.minDelay;
          setTimeout(() => this.fetchStatus(), this.nextUpdateDelay);
        },
        
        init() {
          // Initial fetch after a short delay
          setTimeout(() => this.fetchStatus(), 1000);
        }
      }"
      x-init="init()"
      class="relative"
    >
      <!-- Loading indicator -->
      <div x-show="isLoading" class="absolute top-0 right-0 p-2">
        <svg class="animate-spin h-5 w-5 text-indigo-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
          <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
          <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
        </svg>
      </div>
      
      <!-- Last updated timestamp -->
      <div x-show="lastUpdated" class="text-xs text-gray-500 text-right mb-2">
        <span x-text="'<%= t('.last_updated') %>: ' + new Date(lastUpdated).toLocaleTimeString()"></span>
      </div>
      
      <!-- LLM jobs container that will be updated -->
      <div x-ref="llmJobsContainer">
        <%= render partial: 'prompts/llm_jobs_status', locals: { prompt: @prompt, llm_jobs: @prompt.llm_jobs } %>
      </div>
    </div>
  </section>
</div> 