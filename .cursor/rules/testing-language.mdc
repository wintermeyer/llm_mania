---
description: Testing Language Standards
globs: test/**/*.rb, config/environments/test.rb, app/controllers/application_controller.rb
---
# Testing Language Standards

Standards for language handling in tests

## Configuration

1. Test Environment Setup
```ruby
# test/test_helper.rb
module ActiveSupport
  class TestCase
    # Run tests in parallel
    parallelize(workers: :number_of_processors)

    # Include FactoryBot syntax methods
    include FactoryBot::Syntax::Methods

    # Force English locale for all tests
    setup do
      I18n.locale = :en
      I18n.default_locale = :en
      Rails.application.config.i18n.default_locale = :en
      Rails.application.config.i18n.locale = :en
      Rails.application.config.i18n.available_locales = [:en, :de]
    end

    teardown do
      I18n.locale = :en
    end
  end
end
```

2. Application Controller
```ruby
# app/controllers/application_controller.rb
class ApplicationController < ActionController::Base
  before_action :set_locale

  private

  def set_locale
    return if Rails.env.test? # Skip locale detection in test environment
    I18n.locale = extract_locale_from_accept_language_header || I18n.default_locale
  end
end
```

## Factory Setup

1. User Factory
```ruby
# test/factories/users.rb
FactoryBot.define do
  factory :user do
    first_name { Faker::Name.first_name }
    last_name { Faker::Name.last_name }
    email { Faker::Internet.email }
    password { "password123" }
    lang { "en" }  # Default to English

    trait :german do
      lang { "de" }
      after(:build) do |user|
        # Use German Faker data for consistency
        Faker::Config.locale = "de"
        user.first_name = Faker::Name.first_name
        user.last_name = Faker::Name.last_name
        Faker::Config.locale = "en"  # Reset to English
      end
    end
  end
end
```

## Testing Guidelines

1. Translation Testing
```ruby
# test/models/article_test.rb
class ArticleTest < ActiveSupport::TestCase
  test "article title is translated" do
    article = create(:article, title_en: "English Title", title_de: "Deutscher Titel")

    # Always test English first
    assert_equal "English Title", article.title

    # Test other languages explicitly
    I18n.with_locale(:de) do
      assert_equal "Deutscher Titel", article.title
    end

    # Reset to English
    assert_equal "English Title", article.title
  end
end
```

2. System Tests
```ruby
# test/system/localization_test.rb
class LocalizationTest < ApplicationSystemTestCase
  test "user sees content in their preferred language" do
    # Create German user
    user = create(:user, :german)
    sign_in(user)

    # Test German content
    visit root_path
    assert_text "Willkommen"  # German welcome message

    # Switch to English
    user.update!(lang: "en")
    visit root_path
    assert_text "Welcome"  # English welcome message
  end
end
```

## Best Practices

1. Test Data Language
- Use English for all test data by default
- Use Faker with English locale for generating test data
- Use explicit translations only when testing language features
- Keep test assertions in English

2. Locale Handling
- Never rely on browser language detection in tests
- Always set locale explicitly when needed
- Reset locale to English after tests
- Use `I18n.with_locale` for temporary locale changes

3. Factory Usage
- Default all factories to English
- Use `:german` trait when testing German-specific features
- Reset Faker locale after using other languages
- Keep factory data consistent with locale

4. Error Messages
- All test failure messages should be in English
- Use English for custom test helper messages
- Document any language-specific test behavior
- Keep error messages clear and consistent

## Common Patterns

1. Testing Translations
```ruby
# test/models/product_test.rb
class ProductTest < ActiveSupport::TestCase
  test "product has translations" do
    product = create(:product,
      name_en: "Laptop",
      name_de: "Laptop",
      description_en: "Powerful laptop",
      description_de: "Leistungsstarker Laptop"
    )

    # Test English (default)
    assert_equal "Laptop", product.name
    assert_equal "Powerful laptop", product.description

    # Test German
    I18n.with_locale(:de) do
      assert_equal "Laptop", product.name
      assert_equal "Leistungsstarker Laptop", product.description
    end
  end
end
```

2. Testing Language Switching
```ruby
# test/system/language_switching_test.rb
class LanguageSwitchingTest < ApplicationSystemTestCase
  test "user can switch language" do
    user = create(:user)
    sign_in(user)

    visit edit_user_registration_path

    # Switch to German
    select "Deutsch", from: "Language"
    click_button "Update"

    assert_equal "de", user.reload.lang
    assert_text "Profil erfolgreich aktualisiert"

    # Switch back to English
    select "English", from: "Sprache"
    click_button "Aktualisieren"

    assert_equal "en", user.reload.lang
    assert_text "Profile successfully updated"
  end
end
```

3. API Testing
```ruby
# test/controllers/api/v1/products_controller_test.rb
class Api::V1::ProductsControllerTest < ActionDispatch::IntegrationTest
  test "returns product in requested language" do
    product = create(:product,
      name_en: "Laptop",
      name_de: "Laptop",
      description_en: "Powerful laptop",
      description_de: "Leistungsstarker Laptop"
    )

    # Test English response
    get api_v1_product_url(product), headers: { "Accept-Language": "en" }
    assert_response :success
    assert_equal "Laptop", response.parsed_body["name"]
    assert_equal "Powerful laptop", response.parsed_body["description"]

    # Test German response
    get api_v1_product_url(product), headers: { "Accept-Language": "de" }
    assert_response :success
    assert_equal "Laptop", response.parsed_body["name"]
    assert_equal "Leistungsstarker Laptop", response.parsed_body["description"]
  end
end
```

4. Form Testing
```ruby
# test/system/form_validations_test.rb
class FormValidationsTest < ApplicationSystemTestCase
  test "shows validation errors in user's language" do
    visit new_user_registration_path

    # Test English validation messages
    click_button "Sign up"
    assert_text "Email can't be blank"

    # Test German validation messages
    user = create(:user, :german)
    sign_in(user)

    visit new_article_path
    click_button "Create Article"
    assert_text "Titel muss ausgefÃ¼llt werden"
  end
end
